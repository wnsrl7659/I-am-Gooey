/******************************************************************************/
/*!
\file   Wave.cpp
\author Whitcomb Riley
\par    Email: whitcomb.r\@digipen.edu
\par    Course: Game 200
\brief  Implementation for a wave variable, which returns a value from cos
        depending on the variables provided to it.

\copyright    All content © 2018 DigiPen (USA) Corporation, all rights reserved.
*/
/******************************************************************************/

#include "Wave.h"
#include <math.h>

#include <rapidjson\document.h>
#include <rapidjson\writer.h>
#include <rapidjson\stringbuffer.h>
#include <rapidjson\prettywriter.h>

using namespace rapidjson;

/*****************************************************************/
/*!
		\brief
				Constructs a wave. Sets the default to a wave that can
				only return 1 from returnScalar.
*/
/*****************************************************************/
Wave::Wave()
{
		center = 0;
		height = 1;
		width = 1;
}

/*****************************************************************/
/*!
		\brief
				Sets the variables necessary for generating a wave
		\param centerHeight
				The y value of the center of the wave
		\param heightScale
				The height scale for the wave, ex. 2 would range make the
				values range + or - 2 from the center height
		\param widthScale
				Changes the width of the wave by scaling the inputted
				time when calling returnScalar
*/
/*****************************************************************/
void Wave::WaveSet(float centerHeight, float heightScale, float widthScale)
{
		center = centerHeight;
		height = heightScale;
		width = widthScale;
}
/*****************************************************************/
/*!
		\brief
				Returns the value from cos, manipulated by the wave
				variables
		\param time
				The time to insert into cos
		\return
				The scalar generated by the wave
*/
/*****************************************************************/
float Wave::returnScalar(float time)
{
		if (!height) //Shortcut check
				return center;
		//t = 1, is one revolution in the wave (2PI for sinf)
		//width scalar scales time
		float COS = cosf(time * 3.14f * 2.0f * width);

		//Height will scale the height of the wave
		COS *= height;

		//Center will offset the y of the wave
		COS += center;

		return COS;
}

/*****************************************************************/
/*!
		\brief
				Gets the center of the wave
		\return
				the center of the wave
*/
/*****************************************************************/
float Wave::getCenter()
{
		return center;
}
/*****************************************************************/
/*!
		\brief
				Gets the height of the wave
		\return
				the height of the wave
*/
/*****************************************************************/
float Wave::getHeight()
{
		return height;
}
/*****************************************************************/
/*!
		\brief
				Gets the width of the wave
		\return
				the width of the wave
*/
/*****************************************************************/
float Wave::getWidth()
{
		return width;
}
/*****************************************************************/
/*!
		\brief
				Gets the name of the wave
		\return
				the name of the wave
*/
/*****************************************************************/
std::string Wave::getName()
{
		return name;
}

/*****************************************************************/
/*!
		\brief
				Sets the center of the wave
		\param f
				the value to set it to
*/
/*****************************************************************/
void Wave::setCenter(float f)
{
		center = f;
}
/*****************************************************************/
/*!
		\brief
				Sets the height of the wave
		\param f
				the value to set it to
*/
/*****************************************************************/
void Wave::setHeight(float f)
{
		height = f;
}
/*****************************************************************/
/*!
		\brief
				Sets the width of the wave
		\param f
				the value to set it to
*/
/*****************************************************************/
void Wave::setWidth(float f)
{
		width = f;
}
/*****************************************************************/
/*!
		\brief
				Sets the name of the wave
		\param n
				the string to set the name to
*/
/*****************************************************************/
void Wave::setName(std::string n)
{
		name = n;
}
